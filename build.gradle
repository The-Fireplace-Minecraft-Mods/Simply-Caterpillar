plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

// gradle.properties
version = minecraftVersion + "-" + modVersion
group = modGroup
archivesBaseName = modFileName

java.toolchain.languageVersion = JavaLanguageVersion.of(minecraftJavaVersion)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                simplycaterpillar {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                simplycaterpillar {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                simplycaterpillar {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                simplycaterpillar {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'
    minecraft "net.minecraftforge:forge:" + minecraftVersion + "-" + forgeVersion
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : modId,
                "Specification-Vendor"    : modGroup,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : modGroup,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(ProcessResources) {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand  'loaderVersionRange': loaderVersionRange,
                'modLicense': modLicense,
                'modId': modId,
                'modDisplayName': modDisplayName,
                'modVersion': modVersion,
                'modDescription': modDescription,
                'modDisplayURL': modDisplayURL,
                'modIssueTrackerURL': modIssueTrackerURL,
                'modUpdateJson': modUpdateJson,
                'modLogoFile': modLogoFile,
                'forgeVersionRange': forgeVersionRange,
                'minecraftVersionRange': minecraftVersionRange,
                'modrinthId': modrinthId,
                'curseForgeId': curseForgeId
    }
}
